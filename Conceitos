--- Os arquivos estão organizados em árvore (1) ---

O "/" é o diretório raiz, todos os outros estão embaixo dele, como o "/home", "/bin", "/dev", "/etc".
O "~" significa que você está no seu usuario, na sua home usuario no caso.
O "." antes da barra, significa que está especificando o diretório atual. (não precisamos especificar pro linux o ".", pois ele entende mesmo sem)
O ".." após o cd, significa que estamos indo a um diretório anterior, se usar ../.. irá dois diretorios antes, e assim consecutivamente

-- Caminho relativo e caminho absoluto ---

Caminho relativo: É o caminho para uma pasta ou arquvo em relação ao seu diretório atual. Começam com "./" ou nada. (ex: cd Downloads), só funciona se eu tiver em uma pasta anterior a Downloads nesse ex
Caminho absoluto: É o caminho para uma pasta ou arquivo em relação ao seu computador. Começa com "/". (ex: cd /home/ithalo/Downloads), ele funciona de qualquer local, pois o endereço é absoluto
a
-- Saber usar o manual é uma skill importante ---

É no manual que descobrimos que argumentos que um comando leva, Ele é divido em várias seções, mas as mais importantes são:

Name: Nome completo do comando
Synopsis: Mostra que argumentos o comando leva
Description: Explica de forma mais completa o NAME e a SYNOPSIS

-- Um dos argumentos se chama [OPTIONS] "opção" ---

As opções podem ser abreviadas ou completas. Na abreviação usamos somente "-" seguido de uma letra (ex.: "ls -h"). E de forma completa usamos "--" seguido de uma palavra (ex.: "ls --human-readable")

-- Combinando [OPTIONS] "opções"

Você pode digitar mais de uma opção de uma vez. Ex.: Ao invés de digitar "ls -l-h", basta digitar "ls-lh" que o terminal vai entender que sao dois argumentos abreviados.
Cuidado é diferente de "ls --help" de "ls -help". Nessa segunda ocasião o terminal entende como "ls -h-e-l-p" (que não existe)

-- As regras dos argumentos ---

bold text (texto boldo/negrito): Significa que esse argumento deve ser ESCRITO DO JEITO QUE ESTÁ.
Texto italico: Significa que ele deve ser trocado depois para um nome VÁLIDO, OBRIGATÓRIO ___.
[Texto entre colchetes]: Significa que é argumento OPCIONAL [].
Texto com 3 pontos ... : Pode ser usado MAIS DE UMA VEZ. (ex: ls -la), eu usei mais de um argumento, logo pode ser usado MAIS DE UMA VEZ, quando não temos os "...", só pode ser usado um argumento.



--- 90% dos seus problemas podem ser resolvidos com um "sudo apt install <programa>" (2) ---
--- DPKG vs APT, Gerenciamento de pacotes ---

Linux que são derivados do Debian possuem 2 gerenciadores de software: DPKG e o APT. Os 2 instalam novos pacotes, mas o DPKG não instala as dependências desse seu pacote.
PS: Os 2 precisam de SUDO antes (permissão de super usuário)

-- Como cada um funciona?

DPKG: Simplesmente instala um arquivo .deb que estiver no seu computador (LOCAL), ele não procura por dependências e nem consulta repositórios. (ex.: sudo dpkg -i discord-0.0.32.deb). 
APT: Ele busca o pacote nos repositórios oficiais do seu Linux, e caso ele exista, também busca as dependências dele, Então ele baixa esses pacotes (que vem com a extensão .deb) e os instala com o dpkg

-- DPKG (Debian Package)

sudo dpkg -i <pacote>: Instala o pacote
sudo dpkg -r <pacote>: Remove o pacote
sudo dpkg --purge <pacote>: Remove o pacote e todas as suas referências no sistema
dpkg -l: Lista todos os pacotes instalados.

-- APT (Advanced Packaging Tool)

Procura o pacote nos repositórios oficiais que estão no	arquivo /etc/apt/soruce.list e nos repositórios de terceiros (adicionados na pasta /etc/apt/sources.list.d/)

sudo apt install <pacote>: Instala o pacote e suas dependências, até mesmo consegue baixar as dependencias só, basta escrever a dependencia no lugar do <pacote>
sudo apt update: Atualiza informações de software do seu PC, ele fica apenas CIENTE que tem atualizações como ele mapeasse as coisas novas, porém ele nao baixa e nem instala essas atualizações.
sudo apt upgrade: Atualiza todos os softwares, após o UPDATE lista as novas atualizações, ai damos um UPGRADE para baixar e instalar as novas atualizações.

-- APT-CACHE

sudo apt-cache search <pacote>: Procura os pacotes pelo nome, ai vai mostrar os pacotes disponiveis.
sudo apt-cacho show <pacote>: Mostrará as informações do pacote que você está pesquisando.

-- Quando usar um ou outro? --

Geralmente é preferivel fazer o seguinte quando instalar um software: veja o tutorial do download no site da empresa. Se pedir para usar o apt, resolva tudo com sudo apt install.
Mas as vezes o site pede para você baixar um .deb, aí nesse caso use "dpkg -i <pacote.deb>" e se der problema de dependência, use "sudo apt install -f", esse apt install -f ele verificará a uma instalação que você fez e ira procurar no repositório todas as dependencias, e ira instalar aquela que está faltando, assim consertando o erro.

-- Existem outras formas de instalar softwares? --

-- Site oficial

Existem muito softwares que não estão nos repositórios oficiais do Linux, principalmente softwares proprietários. Nesse caso eu recomenda-se acessar diretamente o site da empresa e checar o procedimento para a instalação.

Repositorío oficial fica em: etc/apt/source.list, só dar um nano ou vim para ver os sites que servem de repositórios.

-- Adicionando repositórios de terceiros

Muitas vezes o site da empresa pede para você colar 2 linhas no seu terminal: 1 para adicionar a chave GPG deles nas chaves reconnhecidas pelo seu apt, e 1 para adicionar o REPOSITÓRIO DELES no seu PC. E logo em seugidar dar um sudo apt update para atualizar os repositórios reconhecidos pelo seu PC.
Geralmente esse processo vai salvar a CHAVE GPG no diretório /etc/apt/trusted.gpg.d/ e o REPOSITÓRIO em /etc/apt/source.list.d/. (Nota: Geralmentea GPG começa com "curl" e o repositório com "echo")

Ex.: Ao instalarmos o brave (navegador), criamos os arquivos CHAVE GPG /etc/apt/trusted,gpd.d/brave-browser-release.gpg e o REPOSITÓRIO /etc/apt/sources.list.d/brave-browser-release-trusty.list

-- Snap store

Uma outra opção para baixar softwares para o linux é através da snap store, que é uma espécie de APP store para linux (criada pela canonical). Todos os aplicativos mais famosos estão lá. A loja do ubuntu baixa tudo de lá.

caso o aplicativo tem na Snap store e você nao quer abrir, basta voce colocar sudo snap <nome_app> install (ex.: sudo snap install spotify)

Antes de usar é necessario ter um pacote chamado snapd, através do terminal "sudo apt install snapd". 
Já instalado é só utilizar "sudo snap <app> install" ou caso deseja usar a loja snap store e baixar por lá, você pode usar (sudo snap install snap-store), ai você consegue usar a loja com a interface.



--- Editores, que editores existem? (3) ---

Nano: O nano é o mais é a mais facil de todas de aprender. Assim que você abre ele todos os comandos disponíveis ficam na parte	debaixa da tela.
Vim: Temido por muitos. e amado por alguns, é de LONGE o editor mais completo e complexo de todos.
Emacs: Por padrão ele vem com interface gráfica, e a versão dele sem interface não é tao boa como o nano e vim.

-- Usando o Nano

"^" significa Crtl e "M" significa alt. Crtl+G: Ajuda, Crtl+O: Salvar, Crtl+X: Sair, Crtl+R: Ler arquivo (Ele importa os textos dentro do arquivo), Alt+U: Undo (Crtl+Z), Alt+E: Redo (Crtl+Y).
Tem que ler a ajuda para descobrir mais todos os comandos que você precisa.

-- Usando o Vim (obs*: Existe o nvim que é o sucessor do vim)

Primeiramente baixe o vim com "sudo apt instal vim". E digite "vimtutor" no terminal, ele é um tutorial interativo fantástico.
Para mover o cursor, use as setinhas do teclado ou "h","j","k" e "l"


Obs*: DD no modo normal: Apaga uma linha por completo, CC no modo normal: Apaga uma linha por completo e ja deixa o curso preparado para escrever na mesma linha vazia, Shift+G: Desce toda a página.

-- Os modos do vim

NORMAL: Serve para entrar nos outros modos, se movimentar no arquivo e rodar comandos mais básicos. Aperte ESC para entrar nele.
INSERÇÃO: Insere texto. Digite "i" quando estiver no modo normal, para entrar no modo inserção.
COMANDO: É um modo que aceita comandos. Para entrar nele digite ":" no modo normal. (Tem bastante comandos, da para trocar o tema do vim, colocar linhas e uma infinidade de coisas.)
VISUAL: Seleciona os textos desejados. Digite "v" quando estiver no modo normal.
VISUAL/BLOCO: Seleciona do jeito de bloco (forma mais simples) aperte "Crtl+V" no modo normal e para recortar o selecionado aperta D

-- Comandos mais usados (vim) (OBs*: Deve ser usado no modo normal)

OBS* O Vim ele tem a capacidade de fazer você digitar a quantidade de linhas e fazer uma ação conforme isso, um dos exemplos é você digitar uma quantidade de linhas e copiar/recortar e depois colar, logo vai colar as quantidades que você digitou antes.

":w" ou ":w!" = Salva
":q" ou ":q!" = Sai
":wq" ou ":wq!" = Salva e sair
"u" = Para dar Crtl+Z (Undo)
"Crtl+R" = Para dar Crtl+Y (Redo)
"yy" = Copia a linha inteira -- OBS*: Se voce digitou a quantidade que voce deseja copiar de linhas e depois apertar yy, ele vai copiar as quantidades de linha que voce setou. --
"dd" = Recorta a linha inteira -- OBS*: Se voce digitou a quantidade que voce deseja copiar de linhas e depois apertar dd, ele vai copiar as quantidades de linha que voce setou. --
"p" = Cola o texto copiado/recortado na linha de baixo
"P" = Cola o texto copiado/recortado na linha de cima
"w" = Pula em palavra por palavra
"i" = Entra no modo inserção do ponto atual
"I" = Entra no modo inserção no inicio da linha
"A" = Entra no modo inserção no final da linha 
"o" = Entra no modo inserção na linha de baixo
"O" = Entra no modo inserção na linha de cima
"J" = Ele puxa a linha de baixo para cima e fica somando.
"gg" = Vai pro inicio do arquivo
"G" = Vai pro final do arquivo
"0" = Coloca o cursor no início da linha (sem entrar em modo de inserção)
"$" = Coloca o cursor no final da linha (sem entrar nem modo de inserção)
"H" (High/Alto) = Coloca o cursor na primeira linha da tela
"M" (Medium/Médio) = Coloca o cursor no meio da tela
"L" (Low/Baixo) = Coloca o cursor na última linha da tela
"zz" = Centraliza na tela a linha que você está
":%s/palavra1/palavra2/g: Ele vai substitui a palavra1 pelo o que voce escrever na /palavra2/g, como fosse o rename das variaveis no vscode.
"/" = Filto para procurar palavra desejada, no modo sensitivo, isso é com diferenciação de maíusculo e minúsculo
"/\c" = Filtro para procurar palavra desejada no modo insensitivo, isso é sem diferenciação de maiusculo e minúsculo
"n" = Vai para a próxima ocorrência encontrada do texto pesquisado
"N" = Vai para a ocorrência anterior do texto pesquisado
"}" = Vai para a próxima linha em branco
"{" = Vai para a linha em branco anterior
"cc" = Recorta uma linha por completo e deixa o cursor preparado para escrever na mesma linha
"cw" = Recorta uma palavra e entra no modo inserção, para dar certo tem que usar no inicio da palavra (corta o que vem depois)
"dw" = Recorta uma palavra e porém não entra em modo de inserção, usar no inicio da palavra (corta o que vem depois)
"ciw" = Recorta a palavra que o cursor estiver dentro e entra em modo inserção
"diw" = Recorta a plavra que o cursor estiver dentro porém não entra em modo de inserção
" ci" " = Recorta a palavra que estiver entre aspas "" e entra no modo inserção
" di" " = Recorta a palavra que estiver entre aspas "" porém não entra em modo inserção
"cis" = Recorta TUDOO e entra em modo inserção
"dis" = Recorta TUDO porém não entra em modo inserção
"cit" = Recorta TUDO que esta dentro de uma tag <> e entra em modo inserção
"dit" = Recorta TUDO que esta dentro de uma tag <> porém não entra em modo inserção
"C" = Recorta tudo que está na frente do cursor e entra em modo de inserção
"D" = Deleta tudo que esta na frente do do cursor

--- Gerenciamento de usuários, grupos, permissões (4)

Todo linux tem vários usuários e grupos. O usuário não necessariamente é um ser humano, softwares podem criar grupos e usuários também.
Quando você instalou o seu Linu, você criou um usuário, e sem perceber também criou um grupo. O nome do meu usuário é ithalo, e o nome do grupo é o mesmo.
Todas as informações de grupos e usuários se encontram nos arquivos /etc/passwd e /etc/group. OBS*: /etc/group mostra só o UID de Grupo, diferente do /etc/passwd que é mais completo)

-- Sintaxe do /etc/passwd

ithalo@ithalo-Nitro-AN515-54:~$ grep ithalo /etc/passwd
ithalo:x:1000:1000:Ithalo,,,:/home/ithalo:/bin/bash

*Cada parte é separada por ":"*
1-) Username
2-) Senha (x significa que existe uma senha cifrada em /etc/shadow)
3-) UID (ID do usuário)
4-) GUI ou GID (ID do grupo)
5-) Comentários (opcional)
6-) Diretório da home do usuário
7-) Path para um comando ou shell

-- Criando usuario (adduser)

Esse comando cria um usuário novo e um grupo com o mesmo nome, e altera os arquivos /etc/passwd, /etc/group, e /etc/shadow.
Ele cria uma home para esse novo usuário em /home e copia os arquivos dentro de /etc/skel para essa home (Caso queira que os usuarios ja venha com uma pasta/arquivo quando criado, só jogar na pasta skell)
Os usuários criados por software tem UID entre 1 e 999, e os usuários criados por você tem de 1000 pra frente. Na máquina do "daniel" tem UID 1000 e "luisa" 1001. A exceção é o root que tem UID 0

-- Criando grupo (addgroup)

Esse comando cria um grupo. Ele é útil para organizar o acesso a um servidor, e controlar as permissões de vários usuários ao mesmo tempo.
O arquivo /etc/group msotra os grupos que existem e quem está em cada um. E o GID (Group Identifier, Identificador do Grupo) dos grupos criados por você também está acima de 1000.

-- Trocando de usuario (su)

Para trocar de usuário basta digitar "su - <nome_do_usuário>", e para entrar como root digite "sudo su" (lembrando que seu usuário precisa estar no grupo sudo) *grep sudo /etc/group*

-- Outros comandos

"id" Lista o seu UIG, GID e os grupos que você está
"chown" Troca o usuário ou grupo dono de um arquivo ou diretório. Exemplo; "sudo chown daniel server.js", "sudo chmod daniel:devops servers.js", "sudo chown :devops server.js"
"userdel" Deleta o usuário, mas não deleta seus arquivos, nem sua home. Exemplo: "userdel giovanna", para remover todos os arquivos junto coloque a opção "userdel -r giovanna"
"usermod" Modifica a conta do usuário. Geralmente é usado para adicionar um usuário a um grupo. ExemplO.: "usermod -aG sudo giovanna" (PODENDO ASSIM ADICIONAR USUARIOS AO GRUPO DE SUDO PARA TER PERMISSÃO ROOT)
"deluser Tira úsuario de um grupo. Exemplo.: "deluser luisa devops"
"groupdel" Deleta o grupo desejado.

-- Permissões --

-- Sintaxe do ls -l

ithalo@ithalo-Nitro-AN515-54:/home$ ls -lh
total 8,0K
drwxr-x---  2 giovanna giovanna 4,0K nov  6 17:00 giovanna
drwxr-x--- 24 ithalo   ithalo   4,0K nov 11 22:03 ithalo

1-) Bloco de permissões
2-) Número de links
3-) Usuário dono
4-) Grupo dono
5-) Tamanho do arquivo
6-) Data e hora da última modificação
7-) Nome do arquivo

*Curiosidade: toda pasta no Linux pesa 4,0k*

-- Tipos de permissões

1-) READ(r): Permissão para ler um arquivo ou ver o conteúdo de um diretório
2-) WRITE(w): Permissão para modificar, criar, renomear e deletar arquivos
3-) EXECUTE(x): Permissão para executar um arquivo. 

-- Blocos de permissões

OBS*: TEM UMA IMAGEM NA PASTA COMANDOLINUX MOSTRANDO TUDO ENVOLVENDO SOBRE

-- chmod

Comando Utilizado para alterar permissões de um arquivo/diretório. Pode-ser utilizado de várias formas.

chmod u=rwx,g=rx,o= <arquivo/diretorio>
chmod o+rwx  <arquivo/diretorio>
chmod 000 <arquivo/diretorio>: chmod em octal ele funciona de forma 000, exemplo 1 em octal é descrito como 001 --x, logo ele vai ativar apenas a execução, 2 em octal é 010 logo ativara -w- escrita

--- Redirecionamento de entrada e saída (5)

-- Tipos de entrada e saída (stdin, stdout e stderr)

No linux existe 1 tipo de entrada e 2 tipos de saída.

stdin: Standart input (entrada padrão). Pode ser algo digitado no teclado ou o texto de um arquivo.
stdout: Standart output (saída padrão). É a saída de um comando quando ele é bem sucedido.
stderr: Standart error (erro padrão). É a saída de um comando quando ocorre um ERRO.

-- Redirecionamento

Redirecionamento para um arquivo 

Os operador de redirecionamento de saídas para um arquivo são o ">" e o ">>".

">" Sobrescreve o contéudo do arquivo com a sáida (ex: ls > <arquivo>) ele vai jogar a saida do ls para esse arquivo, ele meio que deleta tudo que tiver dentro do arquivo e joga a saída do comando
">>" Adiciona a saída no final do arquivo. (ex: ls > <arquivo>) ele vai jogaar a saida do ls para esse arquivo, diferente do ">", ele não subscreve o arquivo, ele pula uma linha e adiciona a saída.

"1>" Sobrescreve o arquivo com a saída padrão (mesma coisa que o ">") (se o comando der erro ele vai jogar no terminal)
"2>" Sobrescreve o arquivo com a saída de erro. (se o arquivo não der erro ele joga para o arquivo especifico, se der certo ele joga para o terminal)
"&>" Sobrescreve o arquivo com todas as saídas.

OBS*: CONSIGO JUNTAR TANTO O "1>" E O "2>" EXEMPLO: (LS 1> TESTE1 2> TESTE2), AI ELE JOGA PARA ARQUIVOS DIFERENTES CASO UMA DAS CONDIÇÕES ACONTECEREM NO CASO DE SAIDA COM ERRO OU SAIDA NORMAL, POREM ELE APAGA A SADA QUE NÃO FOI USADA, EXEMPLO SE EU JOGUEI O ERRO ELE VAI SUBSCREVER O TESTE 2, PORÉM ELE VAI APAGAR TUDO O QUE TINHA NO TESTE 1, POIS DE QUALQUER FORMA ELE SEMPRE LIMPA OS ARQUIVOS COM ">" ÚNICA.

"1>>" Adiciona a saída padrão no final do arquivo. (mesma coisa que o ">>")
"2>>" Adiciona a saída de erro no final do arquivo. (se o arquivo não der erro ele joga para o arquivo especifico, se der certo ele joga para o terminal)
"&>>" Adiciona todas as saídas no final do arquivo.

OBS*: DIFERENTE DA OBSERVAÇÃO DE CIMA ELE NÃO IRÁ APAGAR POIS O ">>" SIGNIICA QUE IRA ADICIONAR E NÃO SUBSCREVER.

-- /dev/null

O /dev/null é mais conhecido como o buraco negro do linux. Por que ele é um "arquivo" vazio, e toda vez que algum output vai para lá, ele é deletado. E qual a utilidade disso? Filtrar o output de um comando.
O Comando find por exemplo quase sempre mostra uma mensagem de erro com permissões, então podemos usar o find e mandar o stderr para /dev/null
